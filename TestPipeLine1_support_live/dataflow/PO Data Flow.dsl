source(output(
		SourceSystem as string,
		ObjectIdentifier as string,
		IcfaOrNonIcfa as string,
		PONumber as string,
		DisplayType as string,
		CompanyCode as string,
		VendorCode as string,
		Ref_Property_Id as string,
		Ref_Unit_Id as string,
		Ref_Vendor_Id as string,
		ExpenseType as string,
		PrintonPO as string,
		Description as string,
		ChangeOrder as string,
		ParentPO as string,
		OrderDate as string,
		RequiredByDate as string,
		ScheduledByDate as string,
		PaymentDueDate as string,
		ToDate as string,
		FromDate as string,
		Closed as string,
		ClosedDate as string,
		UserDefined1 as string,
		UserDefined2 as string,
		UserDefined3 as string,
		UserDefined4 as string,
		UserDefined5 as string,
		UserDefined6 as string,
		UserDefined7 as string,
		UserDefined8 as string,
		InvoiceNo as string,
		BatchName as string,
		EmailWhenAppDeni as string,
		Notes as string,
		AddPayable as string,
		PrintNotes as string,
		BillToName as string,
		BillToAddress1 as string,
		BillToAddress2 as string,
		BillToAddress3 as string,
		BillToCity as string,
		BillToCountry as string,
		BillToState as string,
		BillToZip as string,
		ShipToName as string,
		ShipToAddress1 as string,
		ShipToAddress2 as string,
		ShipToAddress3 as string,
		ShipToCity as string,
		ShipToCountry as string,
		ShipToState as string,
		ShipToZip as string,
		QtyOrd as string,
		Measure as string,
		PropertyCode as string,
		InventoryLocationCode as string,
		ItemTypeCode as string,
		ItemDescription as string,
		StockCode as string,
		StockDescription as string,
		UnitPrice as string,
		Net as string,
		QtyReceived as string,
		DateReceived as string,
		PayAcctCode as string,
		TranType as string,
		VatRate as string,
		Invoice as string,
		InvDate as string,
		UnitCode as string,
		JobCode as string,
		CategoryCode as string,
		ContractCode as string,
		CostCode as string,
		Segment1 as string,
		Segment2 as string,
		Segment3 as string,
		Segment4 as string,
		Segment5 as string,
		Segment6 as string,
		Segment7 as string,
		Segment8 as string,
		Segment9 as string,
		Segment10 as string,
		Segment11 as string,
		Segment12 as string,
		Det1 as string,
		Det2 as string,
		Det3 as string,
		Det4 as string,
		Det5 as string,
		Det6 as string,
		Det7 as string,
		Det8 as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false) ~> POETLOut
source(output(
		SourceSystem as string,
		SourceObject as string,
		ObjectAttribute as string,
		SourceValue as string,
		TargetValue as string
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	partitionBy('hash', 1)) ~> cv027v
POETLOut, cv027v join(POETLOut@SourceSystem == cv027v@SourceSystem
	&& ObjectIdentifier == SourceObject
	&& VendorCode == SourceValue,
	joinType:'left',
	broadcast: 'both')~> Transformjoinone
Transformjoinone select(mapColumn(
		SourceSystem = POETLOut@SourceSystem,
		ObjectIdentifier,
		IcfaOrNonIcfa,
		PONumber,
		DisplayType,
		CompanyCode,
		VendorCode = TargetValue,
		Ref_Property_Id,
		Ref_Unit_Id,
		Ref_Vendor_Id,
		ExpenseType,
		PrintonPO,
		Description,
		ChangeOrder,
		ParentPO,
		OrderDate,
		RequiredByDate,
		ScheduledByDate,
		PaymentDueDate,
		ToDate,
		FromDate,
		Closed,
		ClosedDate,
		UserDefined1,
		UserDefined2,
		UserDefined3,
		UserDefined4,
		UserDefined5,
		UserDefined6,
		UserDefined7,
		UserDefined8,
		InvoiceNo,
		BatchName,
		EmailWhenAppDeni,
		Notes,
		AddPayable,
		PrintNotes,
		BillToName,
		BillToAddress1,
		BillToAddress2,
		BillToAddress3,
		BillToCity,
		BillToCountry,
		BillToState,
		BillToZip,
		ShipToName,
		ShipToAddress1,
		ShipToAddress2,
		ShipToAddress3,
		ShipToCity,
		ShipToCountry,
		ShipToState,
		ShipToZip,
		QtyOrd,
		Measure,
		PropertyCode,
		InventoryLocationCode,
		ItemTypeCode,
		ItemDescription,
		StockCode,
		StockDescription,
		UnitPrice,
		Net,
		QtyReceived,
		DateReceived,
		PayAcctCode,
		TranType,
		VatRate,
		Invoice,
		InvDate,
		UnitCode,
		JobCode,
		CategoryCode,
		ContractCode,
		CostCode,
		Segment1,
		Segment2,
		Segment3,
		Segment4,
		Segment5,
		Segment6,
		Segment7,
		Segment8,
		Segment9,
		Segment10,
		Segment11,
		Segment12,
		Det1,
		Det2,
		Det3,
		Det4,
		Det5,
		Det6,
		Det7,
		Det8,
		SourceObject,
		ObjectAttribute,
		SourceValue
	),
	skipDuplicateMapInputs: false,
	skipDuplicateMapOutputs: false) ~> SelectVC
SelectVC derive(ErrorMsg = iif(isNull(VendorCode),'Bad VC mapping','P'),
	partitionBy('hash', 1)) ~> DerivedColumn1
DerivedColumn1 derive(ErrorMsg = iif(isNull(VendorCode),ErrorMsg+'Bad VC mapping',ErrorMsg+'P')) ~> DerivedColumn2
POETLOut aggregate(each(match(true()), $$+'_NotNull' = countIf(!isNull($$)), $$+'_Null' = countIf(isNull($$)), $$+'_TotalCount' = count($$)),
		each(match(type=='double'||type=='integer'||type=='short'||type=='decimal'), $$+'_StdDev' = round(stddev($$),2), $$+'_Max' = max($$), $$+'_Min' = min($$)),
		each(match(type=='string'), $$+'_MaxLength' = max(length($$)), $$+'_MinLength' = min(length($$)))) ~> SummaryProfile
DerivedColumn2 sink(allowSchemaDrift: true,
	validateSchema: false,
	partitionFileNames:['POYardiout.csv'],
	mapColumn(
		IcfaOrNonIcfa,
		PONumber,
		DisplayType,
		CompanyCode,
		VendorCode,
		Ref_Property_Id,
		Ref_Unit_Id,
		Ref_Vendor_Id,
		ExpenseType,
		PrintonPO,
		Description,
		ChangeOrder,
		ParentPO,
		OrderDate,
		RequiredByDate,
		ScheduledByDate,
		PaymentDueDate,
		ToDate,
		FromDate,
		Closed,
		ClosedDate,
		UserDefined1,
		UserDefined2,
		UserDefined3,
		UserDefined4,
		UserDefined5,
		UserDefined6,
		UserDefined7,
		UserDefined8,
		InvoiceNo,
		BatchName,
		EmailWhenAppDeni,
		Notes,
		AddPayable,
		PrintNotes,
		BillToName,
		BillToAddress1,
		BillToAddress2,
		BillToAddress3,
		BillToCity,
		BillToCountry,
		BillToState,
		BillToZip,
		ShipToName,
		ShipToAddress1,
		ShipToAddress2,
		ShipToAddress3,
		ShipToCity,
		ShipToCountry,
		ShipToState,
		ShipToZip,
		QtyOrd,
		Measure,
		PropertyCode,
		InventoryLocationCode,
		ItemTypeCode,
		ItemDescription,
		StockCode,
		StockDescription,
		UnitPrice,
		Net,
		QtyReceived,
		DateReceived,
		PayAcctCode,
		TranType,
		VatRate,
		Invoice,
		InvDate,
		UnitCode,
		JobCode,
		CategoryCode,
		ContractCode,
		CostCode,
		Segment1,
		Segment2,
		Segment3,
		Segment4,
		Segment5,
		Segment6,
		Segment7,
		Segment8,
		Segment9,
		Segment10,
		Segment11,
		Segment12,
		Det1,
		Det2,
		Det3,
		Det4,
		Det5,
		Det6,
		Det7,
		Det8
	),
	partitionBy('hash', 1)) ~> sinkout
SummaryProfile sink(allowSchemaDrift: true,
	validateSchema: false,
	partitionFileNames:['POSampleSummaryProfileOut'],
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	saveOrder: 1,
	partitionBy('hash', 1)) ~> SinkSummaryProfile